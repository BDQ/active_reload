h1. Active Reload

<a href='http://www.pledgie.com/campaigns/15547'><img alt='Donate Active Reload at www.pledgie.com' src='http://pledgie.com/campaigns/15547.png?skin_name=chrome' border='0' /></a>

Active Reload is a gem that changes a little when Rails code reloading is executed.
Normally Rails "forgets" your code after every request in development mode and loads again necessary
files during the request. If your application is big this can take lot of time especially on "dashboard" page
that uses lot of different classes.

However this constant reloading is not always necessary. This gem changes it so it occurs
before request and only when file was changed or added. It won't make reloading your app
faster but it will skip reloading when nothing changed and that saved second can really sum
up to a big value. It means that after change first request in development mode will reload the code
and take as much time as it takes without this gem but subsequent request will be faster until next
changes due to lack of code reloading.

h2. Y U NO BELIEVE ?

Watch these two videos for comparison:

notextile.. <iframe width="425" height="349" src="http://www.youtube.com/embed/KIOV5Me-83M" frameborder="0" allowfullscreen>
</iframe>
notextile.. <iframe width="425" height="349" src="http://www.youtube.com/embed/HelS-mVnfI4" frameborder="0" allowfullscreen>
</iframe>

h3. Do you want to reproduce the experiment ? Here is the script:

<pre>
require 'bbq/test'
require 'benchmark'

shop = ["Ruby on Rails", "Apache", "Clothing", "Bags", "Mugs"]
admin = [
"Overview", 
"Orders", 
"Next", 
"Products", 
"Option Types", 
"Properties", 
"Prototypes", 
"Product Groups", 
"Reports", 
"Sales Total", 
"Configuration", 
"General Settings",
"Mail Methods",
"Tax Categories",
"Zones",
"States",
"Payment Methods",
"Taxonomies",
"Shipping Methods",
"Inventory Settings",
"Analytics Trackers",
"Complete List",
"Users",
"Promotions"
]

user = Bbq::TestUser.new(:driver => :selenium, :session => :default)
user.visit("/")

Benchmark.measure do

  shop.each do |link|
    user.click_on(link)
  end

  user.visit("/admin")
  user.fill_in("Email", :with => "spree@example.com")
  user.fill_in("Password", :with => "spree@example.com")
  user.click_button "Log In"

  admin.each do |link|
    user.click_on(link)
  end

  FileUtils.touch( Rails.root.join("app/controllers/application_controller.rb") )

  admin.first(5).each do |link|
    user.click_on(link)
  end

  user.click_on "Logout"

end
</pre>

h2. Installation

Simply add Active Reload to your Gemfile and bundle it up:

<pre>
  gem 'active_reload'
</pre>

h2. Compatibility

It was hand tested only with Rails 3.0.9 but should work without any problem on any 3.0.* version.
Expect 3.1.* support soon :-) !

h2. Notifications

You can subscribe to two notifications provided by this gem.

@active_reload.set_clear_dependencies_hook_replaced@ event is triggered when the gem changes original rails hook for code reloading.

<pre>

ActiveSupport::Notifications.subscribe("active_reload.set_clear_dependencies_hook_replaced") do |*args|
  event = ActiveSupport::Notifications::Event.new(*args)
  msg = event.name
  # Ubuntu: https://github.com/splattael/libnotify, Example: Libnotify.show(:body => msg, :summary => Rails.application.class.name, :timeout => 2.5, :append => true)
  # Macos: http://segment7.net/projects/ruby/growl/
  puts Rails.logger.warn(" --- #{msg} --- ")
end

</pre>

@active_support.dependencies.clear@ event is triggered when code reloading is triggered by this gem.

<pre>

ActiveSupport::Notifications.subscribe("active_support.dependencies.clear") do |*args|
  msg = "Code reloaded!"
  # Ubuntu: https://github.com/splattael/libnotify, Example: Libnotify.show(:body => msg, :summary => Rails.application.class.name, :timeout => 2.5, :append => true)
  # Macos: http://segment7.net/projects/ruby/growl/
  puts Rails.logger.info(" --- #{msg} --- ")
end

</pre>

h2. Links

* "Part 2":http://blog.robert.pankowecki.pl/2011/06/faster-rails-development-part-2.html
* "Part 1":http://blog.robert.pankowecki.pl/2011/05/get-faster-rails-development.html